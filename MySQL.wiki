= MySQL =


== Dumps ==
=== take dumps of a complete Database ===

mysqldump -u<user> -h<hostname> -P <port> -p dbname > dbname.sql

=== run SQL from a file into a database ===

mysql -u username -p database_name < /full/path/to/file.sql

== INSERT INTO ==
Inserts into another existing table
INSERT INTO suppliers_northamerica
SELECT * FROM suppliers
WHERE country IN('Argentina', 'Brazil')

== SELECT ALL ==
SELECT productname
FROM products
JOIN order_details ON order_details.productid=products.productid
WHERE order_details.unitprice*quantity > ALL (SELECT AVG(order_details.unitprice*quantity)
                                              FROM order_details
                                              GROUP BY productid)


== SELECT ANY ==
SELECT companyname
FROM customers
WHERE customerid = ANY (SELECT customerid FROM orders
                        JOIN order_details ON orders.orderid=order_details.orderid
                        WHERE quantity > 50 )

== SELECT IN ==
SELECT companyname
FROM suppliers
WHERE city IN (SELECT city FROM customers)


== SELECT INTO ==
Creates a new table with some columns
SELECT *
INTO orders_1997
FROM orders
WHERE orderdate BETWEEN '1997-01-01' AND '1997-12-31'


== SELECT JOIN ==
=== INNER JOIN ===
Just use JOIN
SELECT companyname, productname, unitprice, unitsinstack
FROM suppliers
JOIN products ON products.supplierid=suppliers.supplierid;

=== LEFT JOIN ===
Pulls back all records in first table and matching records in second table
SELECT productname, orderid
FROM products
LEFT JOIN order_details ON products.productid=order_details.productid;

=== RIGHT JOIN ===
Pulls back matching records in first table and all records in second table
SELECT companyname, orderid
FROM orders
RIGHT JOIN customers ON customers.customerid=orders.customerid;

== FULL JOIN ==
Pulls back all records in first table and all records in second table
SELECT productname, categoryname
FROM products
FULL JOIN categories ON categories.categoryid=products.categoryid;

== SELF JOIN ==
Connect a table back to itself through aliases
E.g.: Find suppliers from same country:
SELECT S1.companyname, S2.companyname, S1.country
FROM suppliers S1, suppliers S2
WHERE S1.country=S2.country AND S1.supplierid>S2.supplierid
ORDER BY S1.country


== SUB SELECT ==
SELECT companyname
FROM customers
WHERE EXISTS (SELECT customerid FROM orders
              WHERE orders.customerid=customers.customerid AND
              orderdate BETWEEN '1997-01-01' AND '1999-01-01' )
              
... and it will work with NOT EXISTS too!


== Users ==
=== Show users with a pattern name ===
SELECT User FROM mysql.user where User like '%read-only-%';

=== Create user with pass ===
CREATE USER 'testuser'@'%' IDENTIFIED BY 'test123test!';

=== Change Password for user ===
SET PASSWORD FOR 'mmikhalev'@'%' = PASSWORD('password');

=== Delete user ===
DROP USER 'testuser'@'%';

=== Show privileges ===
SHOW GRANTS for production_un_mx;

=== Grant privileges ===
GRANT ALL PRIVILEGES ON production_mx.* TO 'production_mx'@'%';

GRANT ALL PRIVILEGES ON `prod_pidgey_%`.* TO 'pidgey'@'%';

==== Grant Replication to a new user ====
CREATE USER 'repl'@'%.mydomain.com' IDENTIFIED BY 'slavepass';
GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%.mydomain.com';

=== Revoke privileges ===
revoke all privileges, grant option from 'production_sg'@'%';

REVOKE SELECT ON production_%ru.* FROM 'ru_readonly'@'%';

=== Change password ===
SET PASSWORD FOR 'bob'@'%.example.org' = PASSWORD('auth_string');

=== Error on creating a user after deleting it ===
DROP USER 'testuser'@'%';
FLUSH PRIVILEGES;
CREATE USER 'testuser'@'%' IDENTIFIED BY 'test123test!';


